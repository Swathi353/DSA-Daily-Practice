public class DiagonalSum {
    // Brute for method =complexity O(n^2)
    // public static int DiagSum(int matrix[][]) {
    // int sum = 0;
    // for (int i = 0; i < matrix.length; i++) {
    // for (int j = 0; j < matrix[0].length; j++) {
    // if (i == j) { //PD
    // sum += matrix[i][j];
    // }
    // if (i + j == (matrix.length - 1)) { //SD
    // sum += matrix[i][j];
    // }
    // }
    // }
    // return sum;
    // }

    // optimized method = compexity O(n) best time complexity
    public static int DiagSum(int matrix[][]) {
        int sum = 0;
        for (int i = 0; i < matrix.length; i++) {
            // Primary diagonal
            sum += matrix[i][i];
            // Secondary diagonal
            int j = matrix.length - 1 - i;
            if (i != j) {
                sum += matrix[i][j];
            }
        }

        return sum;
    }

    public static void main(String args[]) {
        int matrix[][] = {
                { 1, 2, 3, 4 },
                { 5, 6, 7, 8 },
                { 9, 10, 11, 12 },
                { 13, 14, 15, 16 }
        };
        int matrix2[][] = {
                { 1, 2, 3 },
                { 4, 5, 6 },
                { 7, 8, 9 }
        };
        int matrix_even = DiagSum(matrix);
        int matrix_odd = DiagSum(matrix2);
        System.out.println(matrix_even);
        System.out.println(matrix_odd);
    }
}
